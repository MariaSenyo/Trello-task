{"version":3,"sources":["actions/listsActions.js","actions/cardsActions.js","actions/actions.js","reducers/listsReducer.js","reducers/reducers.js","store/store.js","components/TrelloCard.js","components/TrelloActionButton.js","components/TrelloList.js","components/App.js","reportWebVitals.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","cardID","initialState","id","cards","listsReducer","state","action","newList","newCard","newState","map","list","splice","find","card","listStart","listEnd","combineReducers","lists","store","createStore","rootReducer","TrelloCard","index","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","className","CardContent","Typography","gutterBottom","TrelloActionButton","formOpen","openForm","setState","closeForm","e","handleInputChange","target","value","handleAddList","dispatch","props","handleAddCard","renderAddButton","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","opacity","color","backgroundColor","Icon","renderForm","placeholder","buttonTitle","autoFocus","onBlur","onChange","Button","onMouseDown","variant","marginLeft","cursor","this","React","Component","connect","TrelloList","droppableId","droppableProps","App","onDragEnd","result","destination","source","direction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d594e00d.chunk.js","sourcesContent":["import {CONSTANTS} from \"../actions/actions\";\r\n\r\nexport const addList = (title) => {\r\n    return {\r\n        type: CONSTANTS.ADD_LIST,\r\n        payload: title\r\n    };\r\n};\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId,\r\n    type\r\n) => {\r\n    return {\r\n        type: CONSTANTS.DRAG_HAPPENED,\r\n        payload: {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            type\r\n        }\r\n    }\r\n}","import {CONSTANTS} from \"../actions/actions\";\r\n\r\nexport const addCard = (listID, text) => {\r\n    return {\r\n        type: CONSTANTS.ADD_CARD,\r\n        payload: {text, listID}\r\n    };\r\n};","export * from \"./listsActions\";\r\nexport * from \"./cardsActions\";\r\n\r\n\r\nexport const CONSTANTS = {\r\n    ADD_CARD: \"ADD_CARD\",\r\n    ADD_LIST: \"ADD_LIST\",\r\n    DRAG_HAPPENED: \"DRAG_HAPPENED\"\r\n};","import {CONSTANTS} from \"../actions/actions\";\r\n\r\nlet listID = 2;\r\nlet cardID = 6;\r\n\r\nconst initialState = [\r\n    {\r\n        title: \"Цього тижня\",\r\n        id: `list-${0}`,\r\n        cards: [\r\n            {\r\n                id: `card-${0}`,\r\n                text: \"Закінчити проект\"\r\n            },\r\n            {\r\n                id: `card-${1}`,\r\n                text: \"Зустріч з командою: обговорити поточний стан тасків, розподілити роботу та перевірити чи потрібно перенести дедлайни\"\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        title: \"Цього місяця\",\r\n        id:`list-${1}`,\r\n        cards: [\r\n            {\r\n                id: `card-${2}`,\r\n                text: \"Catch up з менеджером\"\r\n            },\r\n            {\r\n                id: `card-${3}`,\r\n                text: \"Дзвінок з замовником\"\r\n            },\r\n            {\r\n                id: `card-${4}`,\r\n                text: \"Почати роботу над новим проектом\"\r\n            },\r\n            {\r\n                id: `card-${5}`,\r\n                text: \"Купити книгу та знайти новий курс\"\r\n            },\r\n        ]\r\n    }\r\n]\r\n\r\nconst listsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case CONSTANTS.ADD_LIST:\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listID}`\r\n            }\r\n            listID += 1\r\n            return [...state, newList];\r\n        case CONSTANTS.ADD_CARD: {\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                id: `card-${cardID}`\r\n            }\r\n            cardID += 1;\r\n\r\n            const newState = state.map(list => {\r\n                if (list.id === action.payload.listID) {\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else {\r\n                    return list\r\n                }\r\n            })\r\n            return newState;\r\n        }\r\n        case CONSTANTS.DRAG_HAPPENED:\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                // draggableId,\r\n                type\r\n            } = action.payload;\r\n\r\n            const newState = [...state];\r\n\r\n            if(type === 'list'){\r\n                const list = newState.splice(droppableIndexStart, 1);\r\n                newState.splice(droppableIndexEnd, 0, ...list);\r\n                return newState;\r\n            }\r\n\r\n            if(droppableIdStart === droppableIdEnd){\r\n                const list = state.find(list => droppableIdStart === list.id);\r\n                const card = list.cards.splice(droppableIndexStart, 1);\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n\r\n            if(droppableIdStart !== droppableIdEnd){\r\n                const listStart = state.find(list=> droppableIdStart === list.id);\r\n\r\n                const card = listStart.cards.splice(droppableIndexStart, 1);\r\n\r\n                const listEnd = state.find(list => droppableIdEnd === list.id);\r\n\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default listsReducer;","import {combineReducers} from \"redux\";\r\nimport listsReducer from \"./listsReducer\";\r\n\r\nexport default combineReducers({\r\n    lists: listsReducer\r\n});","import {createStore} from \"redux\";\r\nimport rootReducer from \"../reducers/reducers\";\r\n\r\n// const reducer = () =>{}\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport \"./TrelloCard.scss\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst TrelloCard = ({text, id, index}) => {\r\n    return (\r\n        <Draggable draggableId={String(id)} index={index}>\r\n            {provided => (\r\n                <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                    <Card className='cardContainer'>\r\n                        <CardContent>\r\n                            <Typography\r\n                                gutterBottom>\r\n                                {text}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nexport default TrelloCard;","import React from 'react';\r\nimport {Icon, Card, Button} from \"@material-ui/core\";\r\nimport \"./TrelloActionButton.scss\";\r\nimport Textarea from \"react-textarea-autosize\";\r\nimport {connect} from \"react-redux\";\r\nimport {addList} from \"../actions/listsActions\";\r\nimport {addCard} from \"../actions/cardsActions\";\r\n\r\nclass TrelloActionButton extends React.Component {\r\n\r\n    state = {\r\n        formOpen: false\r\n    };\r\n\r\n    openForm = () => {\r\n        this.setState({\r\n            formOpen: true\r\n        })\r\n    };\r\n\r\n    closeForm = (e) => {\r\n        this.setState({\r\n            formOpen: false\r\n        })\r\n    };\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleAddList = () => {\r\n        const {dispatch} = this.props;\r\n        const {text} = this.state;\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: \"\"\r\n            });\r\n            dispatch(addList(text));\r\n\r\n        }\r\n        return;\r\n    };\r\n\r\n    handleAddCard = () => {\r\n        const {dispatch, listID} = this.props;\r\n        const {text} = this.state;\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: \"\"\r\n            });\r\n            dispatch(addCard(listID, text));\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderAddButton = () => {\r\n        const {list} = this.props;\r\n\r\n        const buttonText = list ? \"Add new list\" : \"Add new card\"\r\n        const buttonTextOpacity = list ? 1 : 0.5;\r\n        const buttonTextColor = list ? \"white\" : \"inherit\";\r\n        const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\r\n\r\n        return (\r\n            <div className='openForButtonGroup'\r\n                 onClick={this.openForm}\r\n                 style={{\r\n                     opacity: buttonTextOpacity,\r\n                     color: buttonTextColor,\r\n                     backgroundColor: buttonTextBackground\r\n                 }}>\r\n                <Icon>add</Icon>\r\n                <p>{buttonText}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderForm = () => {\r\n        const {list} = this.props;\r\n\r\n        const placeholder = list\r\n            ? \"Enter list title\"\r\n            : \"Enter a title for this card\";\r\n\r\n        const buttonTitle = list ? \"Add New List\" : \"Add New Card\";\r\n\r\n        return <div>\r\n            <Card className=\"card_style\">\r\n                <Textarea\r\n                    className=\"textarea_style\"\r\n                    placeholder={placeholder}\r\n                    autoFocus\r\n                    onBlur={this.closeForm}\r\n                    value={this.state.text}\r\n                    onChange={this.handleInputChange}\r\n                />\r\n            </Card>\r\n            <div className='formButtonGroup'>\r\n\r\n                <Button\r\n                    onMouseDown={list ? this.handleAddList : this.handleAddCard}\r\n                    variant=\"contained\"\r\n                    color='secondary'>\r\n                    {buttonTitle}{' '}\r\n                </Button>\r\n                <Icon className=\"icon-close\" style={{marginLeft: 8, cursor: \"pointer\"}}>\r\n                    close\r\n                </Icon>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton();\r\n    }\r\n}\r\n\r\nexport default connect(addList)(TrelloActionButton);","import React from 'react';\r\nimport TrelloCard from \"./TrelloCard\";\r\nimport \"./TrelloList.scss\";\r\nimport TrelloActionButton from \"./TrelloActionButton\";\r\nimport {Droppable, Draggable} from \"react-beautiful-dnd\";\r\n\r\nconst TrelloList = ({title, cards, listID, index}) => {\r\n    return (\r\n        <Draggable draggableId={String(listID)} index={index}>\r\n            {provided => (\r\n                <div {...provided.draggableProps}\r\n                     ref={provided.innerRef}\r\n                     className=\"list_container\"\r\n                     {...provided.dragHandleProps}\r\n                >\r\n                    <Droppable droppableId={String(listID)} type=\"card\">\r\n                        {provided => (\r\n                            <div {...provided.droppableProps}\r\n                                 ref={provided.innerRef}\r\n                            >\r\n                                <h3>{title}</h3>\r\n                                {cards.map((card, index) =>\r\n                                    <TrelloCard key={card.id}\r\n                                                index={index}\r\n                                                text={card.text}\r\n                                                id={card.id}/>)}\r\n                                <TrelloActionButton listID={listID}/>\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nexport default TrelloList;","import React, {Component} from 'react';\nimport TrelloList from \"./TrelloList\";\nimport {connect} from 'react-redux';\nimport \"./App.scss\";\nimport TrelloActionButton from \"./TrelloActionButton\";\nimport {DragDropContext, Droppable} from \"react-beautiful-dnd\";\nimport {sort} from \"../actions/listsActions\";\n\nclass App extends Component {\n  onDragEnd = (result) => {\n    const {destination, source, draggableId, type} = result;\n\n    if (!destination) {\n      return;\n    }\n\n    this.props.dispatch(sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n    ));\n  };\n\n  render() {\n    const {lists} = this.props;\n    return (\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <div className=\"App\">\n            <h1>Trello-like board</h1>\n            <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n              {provided => (\n                  <div {...provided.droppableProps} ref={provided.innerRef} className='lists_container'>\n                    {lists.map((list, index) =>\n                        <TrelloList listID={list.id}\n                                    key={list.id}\n                                    title={list.title}\n                                    cards={list.cards}\n                                    index={index}/>)}\n                    {provided.placeholder}\n                    <TrelloActionButton list/>\n                  </div>\n              )}\n            </Droppable>\n          </div>\n        </DragDropContext>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n})\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\"\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./index.css\";\n\nReactDOM.render(\n    <div className='container'>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </div>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}